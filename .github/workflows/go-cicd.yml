name: Go CI

on:
  push:
    branches:
      - main     # Trigger workflow on push to 'main' branch
  pull_request:
    branches:
      - main     # Trigger workflow on pull request to 'main' branch

jobs:
  build:
    runs-on: ubuntu-latest  # Use the latest version of Ubuntu

    steps:
      # Step 1: Checkout the repository code
      - name: Checkout repository
        uses: actions/checkout@v3

      # Step 2: Set up Go environment
      - name: Set up Go
        uses: actions/setup-go@v3
        with:
          go-version: '1.18'  # Specify the Go version to use

      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up environment
        run: |
          echo "BUILD_TIMESTAMP=$(date)" >> $GITHUB_ENV
          echo "COMMIT_HASH=$(git rev-parse HEAD)" >> $GITHUB_ENV

      - name: Print environment variables
        run: |
          echo "Build Timestamp: $BUILD_TIMESTAMP"
          echo "Commit Hash: $COMMIT_HASH"	

      # Step 3: Cache Go modules to speed up the workflow
      - name: Cache Go modules
        uses: actions/cache@v3
        with:
          path: ~/.cache/go-build
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      # Step 4: Install dependencies and run tests
      - name: Run tests
        run: |
          go mod tidy   # Ensure dependencies are up-to-date
          go test       # Run Go tests

      # Step 5: Build the Go project (optional, if you want to create an executable)
      - name: Build project
        run: go build -v
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Save build data
        run: |
          echo "BUILD_TIMESTAMP=$(date)" > build_info.txt
          echo "COMMIT_HASH=$(git rev-parse HEAD)" >> build_info.txt

      - name: Upload build data
        uses: actions/upload-artifact@v4
        with:
          name: build-data
          path: build_info.txt
          
      - name: Download build data
        uses: actions/download-artifact@v4
        with:
          name: build-data

      - name: Access build data
        run: |
          cat build_info.txt

      # Optional: Commit changes (if any generated files need to be pushed back)
      # Only run if build and tests are successful
      - name: Commit generated files
        if: ${{ steps.build.outcome == 'success' }}  # Run only if the build is successful
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git add .
          git commit -m "Automated commit from GitHub Actions"
          git push origin main
